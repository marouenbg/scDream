#Packages
library(DistMap)
library(nnet)#needed function to compute position of max
library(Seurat)#trying with seurat

#change working directory
setwd("/home/marouen/dreamChallenge/data/singleCellData")

##load data
#Raw data
raw.data = read.table("dge_raw.txt",
                      sep = "\t",
                      row.names = NULL,
                      stringsAsFactors = F,
                      quote = "")

raw.data.genes = raw.data$V1
raw.data$V1 = NULL
print(grep("'",raw.data.genes,value = T,fixed = T))
raw.data.genes = gsub("'","",raw.data.genes,fixed = T)
raw.data = as.matrix(raw.data)
rownames(raw.data) = raw.data.genes

#Normalized data
normalized.data = read.table("dge_normalized.txt",
                             sep = "\t",
                             row.names = NULL,
                             stringsAsFactors = F,
                             quote = "")

normalized.data.genes = normalized.data$row.names
normalized.data$row.names = NULL
print(grep("'",normalized.data.genes,value = T,fixed = T))
normalized.data.genes = gsub("'","",normalized.data.genes,fixed = T)
normalized.data = as.matrix(normalized.data)
rownames(normalized.data) = normalized.data.genes
stopifnot(all(normalized.data.genes == raw.data.genes))

#In situ
setwd('../refDB')
insitu.matrix = read.table("binarized_bdtnp.csv", sep = ",",header = T)
insitu.genes_orig <- colnames(insitu.matrix)
missingGenes = insitu.genes_orig[which(!insitu.genes_orig %in% normalized.data.genes)]
print(missingGenes)
insitu.genes = gsub(".","-",insitu.genes_orig,fixed = T)
insitu.genes = gsub("-spl-","(spl)",insitu.genes,fixed = T)
stopifnot(all(insitu.genes %in% raw.data.genes))
insitu.matrix = as.matrix(insitu.matrix)
colnames(insitu.matrix) = insitu.genes
#Reduce set of genes
res = dim(insitu.matrix)
indGenes=24:res[2]
nGenes=length(indGenes)
insitu.matrix = insitu.matrix[,indGenes]

#Create unique bins
dimInSitu=dim(insitu.matrix)
uniqueBins=0
count=0
nonUniqueVec=rep(0,dimInSitu[1])
for (i in 1:(dimInSitu[1])){
  if(nonUniqueVec[i]!=0){
    next
  }else{
    count=count+1
    nonUniqueVec[i]=count
    if (i==(dimInSitu[1])){
     break 
    }
  }
  for(j in (i+1):dimInSitu[1]){
    if(all(insitu.matrix[i,]==insitu.matrix[j,]) & nonUniqueVec[j]==0){
      nonUniqueVec[j]=count
    }
  }
}
table(nonUniqueVec)
sum(table(nonUniqueVec))
tail(sort(table(nonUniqueVec)))

#Build binary correlation matrix
nNewBins=max(nonUniqueVec)
corrMat=matrix(0L, nrow = dimInSitu[1], ncol = nNewBins)# corrMat is old bins by new bins
for (i in 1:nNewBins){
  corrMat[which(nonUniqueVec == i),i]=1
}
sum(table(nonUniqueVec)==1, na.rm=TRUE)#Number of new bins with uniquely mapped original bin

#Build new reference with super bins
insitu.matrix.aggregated = matrix(0L, nrow = nNewBins, ncol = nGenes)
for(i in 1:nNewBins){
  #correspond new bin to old bin
  j=which(corrMat[,i]==1)[1]#take the first correspondance as they are all equal
  insitu.matrix.aggregated[i,]=insitu.matrix[j,]
}
colnames(insitu.matrix.aggregated) = colnames(insitu.matrix)

#Geometry
geometry = read.csv("geometry.txt",sep = " ")
colnames(geometry) = c("x","y","z")

##Run DistMap
dm = new("DistMap",
         raw.data=raw.data,
         data=normalized.data,
         insitu.matrix=insitu.matrix.aggregated)
         #geometry=as.matrix(geometry))
dm <- binarizeSingleCellData(dm, seq(0.15, 0.5, 0.01))

#write.table(dm@binarized.data,file = "binarizedData_distMap.csv",sep = ",",row.names = T,col.names = T)
dm <- mapCells(dm)

#Map cells back using max MCC
dimMcc=dim(dm@mcc.scores)
mapMat =  matrix(0L, nrow = dimMcc[2], ncol = dimInSitu[1])#cells by bins
for(i in 1:dimMcc[2]){#loop through cells
  x=which.max(dm@mcc.scores[,i])#takes first of ties
  #x=which(dm@mcc.scores[,i] == max(dm@mcc.scores[,i]))#take all maxes
  #y=vector()
  #for(j in 1:length(x)){
  #  y=append(y,which(corrMat[,x[j]]==1))
  #}
  y=which(corrMat[,x]==1)
  mapMat[i,y]=1#put back y and insitu aggregated and number of genes
}

##
#savemapMat=mapMat #savemat is the original MCC matrix
#saveMcc=dm@mcc.scores
i=1
which(mapMat[i,]==1)#162 is n1 in 24:end setting but  n3 in the 84 genes settings
which(savemapMat[i,]==1)#134 (look for 162) is 15th on the 24:end classification

#Seurat stuff
#Find duplicate genes
ind=which(duplicated(rownames(normalized.data))==TRUE)
normalized.data=normalized.data[-ind,]

#Call Seurat
nbt=new("seurat",data=normalized.data)

#Scale Data
nbt=NormalizeData(nbt)
nbt=ScaleData(nbt)

nbt=FindVariableGenes(nbt,y.cutoff = 2,x.low.cutoff = 2,mean.function = ExpMean,dispersion.function = LogVMR)

nbt=RunPCA(nbt,do.print=FALSE)
pca.plot(nbt,1,2,pt.size = 2)

