install.packages(distmap)
install.packages(DistMap)
install.packages("DistMap")
#aaaa
library(devtools)
install_github("rajewsky-lab/DistMap")
install.packages("devtools")
#aaaa
library(devtools)
install_github("rajewsky-lab/DistMap")
install.packages("httr")
install.packages("curl")
install.packages("openssl")
install.packages("git2r")
install.packages("Openssl")
y
install.packages("openssl")
#aaaa
library(devtools)
install.packages(openssl)
packages.install(openssl)
install.packages(openssl)
install.packages('openssl')
install.packages('openssl')
install.packages('git2r')
install.packages('devtools')
install.packages('httr')
install.packages('curl')
install.packages('curl')
install.packages('httr')
install.packages('devtools')
#aaaa
library(devtools)
install_github("rajewsky-lab/DistMap)")
#aaaa
library(devtools)
install_github("rajewsky-lab/DistMap)")
install_github("rajewsky-lab/DistMap")
getwd
getwd()
#change working directory
setwd("/home/marouen/dreamChallenge")
#load data
raw.data = read.csv("dge_raw.txt",sep = "\t",header = F)
#change working directory
setwd("/home/marouen/dreamChallenge/data")
#load data
raw.data = read.csv("dge_raw.txt",sep = "\t",header = F)
#change working directory
setwd("/home/marouen/dreamChallenge/data/singleCellData")
#load data
raw.data = read.csv("dge_raw.txt",sep = "\t",header = F)
rownames(raw.data) = raw.data$V1
#load data
raw.data = read.csv("dge_raw.txt",sep = "\t",header = F)
rownames(raw.data)
raw.data$V1
raw.data
colnames(raw.data)
#load data
raw.data = read.csv("dge_raw.txt",sep = "\t",header = F)
rownames(raw.data) = raw.data$V1
gsub("'","",raw.data.genes,fixed = T)
#load data
raw.data = read.csv("dge_raw.txt",sep = "\t",header = F)
raw.data.genes = raw.data$V1
raw.data$V1 = NULL
raw.data.genes = gsub("'","",raw.data.genes,fixed = T)
raw.data = as.matrix(raw.data)
rownames(raw.data) = raw.data.genes
#Raw data
raw.data = read.csv("dge_raw.txt",sep = "\t",
row.names = NULL,
stringsAsFactors = F,
quote = "")
raw.data.genes = raw.data$V1
raw.data$V1 = NULL
raw.data.genes = gsub("'","",raw.data.genes,fixed = T)
raw.data = as.matrix(raw.data)
rownames(raw.data) = raw.data.genes
normalized.data = read.table("dge_normalized.txt",
sep = "\t",
row.names = NULL,
stringsAsFactors = F,
quote = "")
normalized.data.genes = normalized.data$row.names
normalized.data$row.names = NULL
normalized.data.genes = gsub("'","",normalized.data.genes,fixed = T)
normalized.data = as.matrix(normalized.data)
rownames(normalized.data) = normalized.data.genes
stopifnot(all(normalized.data.genes == raw.data.genes))
insitu.matrix = read.table(gzfile("binarized_bdtnp.csv.gz",'rt'), sep = ",",header = T)
insitu.genes_orig <- colnames(insitu.matrix)
missingGenes = insitu.genes_orig[which(!insitu.genes_orig %in% normalized.data.genes)]
print(missingGenes)
#in situ data
setwd('../refDB')
insitu.matrix = read.table("binarized_bdtnp.csv.gz", sep = ",",header = T)
insitu.matrix = read.table("binarized_bdtnp.csv", sep = ",",header = T)
insitu.genes_orig <- colnames(insitu.matrix)
missingGenes = insitu.genes_orig[which(!insitu.genes_orig %in% normalized.data.genes)]
print(missingGenes)
insitu.genes = gsub(".","-",insitu.genes_orig,fixed = T)
# also replace .spl. --> (spl)
insitu.genes = gsub("-spl-","(spl)",insitu.genes,fixed = T)
# assert that all institu genes appear in the gene names
stopifnot(all(insitu.genes %in% raw.data.genes))
insitu.genes
raw.data.genes
#in situ data
setwd('../refDB')
pwd
ls
ls()
insitu.matrix = read.table("binarized_bdtnp.csv", sep = ",",header = T)
insitu.genes_orig <- colnames(insitu.matrix)
missingGenes = insitu.genes_orig[which(!insitu.genes_orig %in% normalized.data.genes)]
print(missingGenes)
insitu.genes = gsub(".","-",insitu.genes_orig,fixed = T)
insitu.genes = gsub("-spl-","(spl)",insitu.genes,fixed = T)
stopifnot(all(insitu.genes %in% raw.data.genes))
stopifnot(all(normalized.data.genes == raw.data.genes))
stopifnot(all(insitu.genes %in% normalized.data.genes))
print(grep("'",raw.data.genes,value = T,fixed = T))
missingGenes = insitu.genes_orig[which(!insitu.genes_orig %in% raw.data.genes)]
print(missingGenes)
#change working directory
setwd("/home/marouen/dreamChallenge/data/singleCellData")
#load data
#Raw data
raw.data = read.table(gzfile("dge_raw.txt.gz",'rt'),
sep = "\t",
row.names = NULL,
stringsAsFactors = F,
quote = "")
#load data
#Raw data
raw.data = read.table("dge_raw.txt.gz",
sep = "\t",
row.names = NULL,
stringsAsFactors = F,
quote = "")
#load data
#Raw data
raw.data = read.table("dge_raw.txt",
sep = "\t",
row.names = NULL,
stringsAsFactors = F,
quote = "")
raw.data.genes = raw.data$V1
raw.data$V1 = NULL
print(grep("'",raw.data.genes,value = T,fixed = T))
raw.data.genes = gsub("'","",raw.data.genes,fixed = T)
raw.data = as.matrix(raw.data)
rownames(raw.data) = raw.data.genes
normalized.data = read.table(gzfile("dge_normalized.txt.gz",'rt'),
sep = "\t",
row.names = NULL,
stringsAsFactors = F,
quote = "")
normalized.data = read.table("dge_normalized.txt.gz",
sep = "\t",
row.names = NULL,
stringsAsFactors = F,
quote = "")
normalized.data = read.table("dge_normalized.txt",
sep = "\t",
row.names = NULL,
stringsAsFactors = F,
quote = "")
normalized.data.genes = normalized.data$row.names
normalized.data$row.names = NULL
print(grep("'",normalized.data.genes,value = T,fixed = T))
normalized.data.genes = gsub("'","",normalized.data.genes,fixed = T)
normalized.data = as.matrix(normalized.data)
rownames(normalized.data) = normalized.data.genes
stopifnot(all(normalized.data.genes == raw.data.genes))
insitu.matrix = read.table("binarized_bdtnp.csv.gz", sep = ",",header = T)
insitu.matrix = read.table("binarized_bdtnp.csv", sep = ",",header = T)
setwd('../refDB')
insitu.matrix = read.table("binarized_bdtnp.csv", sep = ",",header = T)
insitu.genes_orig <- colnames(insitu.matrix)
missingGenes = insitu.genes_orig[which(!insitu.genes_orig %in% normalized.data.genes)]
print(missingGenes)
insitu.genes = gsub(".","-",insitu.genes_orig,fixed = T)
insitu.genes = gsub("-spl-","(spl)",insitu.genes,fixed = T)
stopifnot(all(insitu.genes %in% raw.data.genes))
insitu.matrix = as.matrix(insitu.matrix)
colnames(insitu.matrix) = insitu.genes
#Geometry
geometry = read.csv(gzfile("geometry.txt.gz",'rt'),sep = " ")
#Geometry
geometry = read.csv(gzfile("geometry.txt",'rt'),sep = " ")
#Geometry
geometry = read.csv("geometry.txt",sep = " ")
colnames(geometry) = c("x","y","z")
##Run DistMap
dm = new("DistMap",
raw.data=raw.data,
data=normalized.data,
insitu.matrix=insitu.matrix,
geometry=as.matrix(geometry))
#Packages
library(DistMap)
##Run DistMap
dm = new("DistMap",
raw.data=raw.data,
data=normalized.data,
insitu.matrix=insitu.matrix,
geometry=as.matrix(geometry))
dm <- binarizeSingleCellData(dm, seq(0.15, 0.5, 0.01))
dm <- mapCells(dm)
dm
pha = computeVISH(dm, 'sna', threshold=0.75)
plot(pha)
dm@mcc.scores
head(dm@mcc.scores,10)
head(dm@mcc.scores,5)
tail(dm@mcc.scores,5)
dm@mcc.scores[1,:]
dm@mcc.scores[1,]
dm@mcc.scores[2,]
dm@mcc.scores[3,]
dm@mcc.scores[,1]
size(dm@mcc.scores)
length(dm@mcc.scores)
dim(dm@mcc.scores)
sort(dm@mcc.scores[1,])
sort(dm@mcc.scores[,1])
sort(dm@mcc.scores[,1])[1]
sort(dm@mcc.scores[,1])[end]
length(dm@mcc.scores[,1])
sort(dm@mcc.scores[,1])[3039]
sort(dm@mcc.scores[,1])
sort(dm@mcc.scores[,1])[3040]
sort(dm@mcc.scores[,1])[3039]
sort(dm@mcc.scores[,1])[3038]
length(dm@mcc.scores[1,])
sort(dm@mcc.scores[,1])[1297]
sort(dm@mcc.scores[,1])[1296]
sort(dm@mcc.scores[,1])[3039]
sort(dm@mcc.scores[,1])[3038]
sort(dm@mcc.scores[,2])[3039]
sort(dm@mcc.scores[,2])[3038]
sort(dm@mcc.scores[,3])[3039]
sort(dm@mcc.scores[,3])[3038]
sort(dm@mcc.scores[,4])[3039]
sort(dm@mcc.scores[,4])[3038]
sort(dm@mcc.scores[,5])[3038]
sort(dm@mcc.scores[,5])[3039]
sort(dm@mcc.scores[,4])[3039]
sort(dm@mcc.scores[,4])[3038]
sort(dm@mcc.scores[,4])[3037]
sort(dm@mcc.scores[,2])[3037]
sort(dm@mcc.scores[,2])[3038]
sort(dm@mcc.scores[,2])[3039]
sort(dm@mcc.scores[,2],'decreasing')[3039]
sort(dm@mcc.scores[,2],'decreasing')
sort(dm@mcc.scores[,2],decreasing=TRUE)[3039]
sort(dm@mcc.scores[,2],decreasing=TRUE)[3038]
sort(dm@mcc.scores[,2])[3039]
log(sort(dm@mcc.scores[,2])[3039])
log(sort(dm@mcc.scores[,2],decreasing=TRUE)[3039])
log(sort(dm@mcc.scores[,1])[3039])
log(sort(dm@mcc.scores[,1],decreasing=TRUE)[3039])
log(sort(dm@mcc.scores[,1],decreasing=TRUE)[3039])
sort(dm@mcc.scores[,4])[3038]==sort(dm@mcc.scores[,4])[3039]
#find non unique max
refs,sc=dim(dm@mcc.scores)
#find non unique max
dimMcc=dim(dm@mcc.scores)
dimMcc
dimMcc[0]
dimMcc[1]
sort(dm@mcc.scores[,2])[dimMcc[1]]
c(0:1:10)
0:10
dimMcc[2]
#find non unique max
count=0
dimMcc=dim(dm@mcc.scores)
for (i in dimMcc[2]){
if (sort(dm@mcc.scores[,i])[dimMcc[1]]==sort(dm@mcc.scores[,i])[dimMcc[1]-1]){
count=count+1
}
}
count
for (i in dimMcc[2]){
print(i)
if (sort(dm@mcc.scores[,i])[dimMcc[1]]==sort(dm@mcc.scores[,i])[dimMcc[1]-1]){
count=count+1
}
}
for (i in 1:dimMcc[2]){
print(i)
if (sort(dm@mcc.scores[,i])[dimMcc[1]]==sort(dm@mcc.scores[,i])[dimMcc[1]-1]){
count=count+1
}
}
count
dim(dm@data)
#find non unique max
count=0
dimMcc=dim(dm@mcc.scores)
for (i in 1:dimMcc[2]){
if (sort(dm@mcc.scores[,i])[dimMcc[1]]==sort(dm@mcc.scores[,i])[dimMcc[1]-2]){
count=count+1
}
}
count
dimMcc[2])
dimMcc[2]
